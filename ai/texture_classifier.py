# -*- coding: utf-8 -*-
"""Attribute_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1prdIi9syRBmaEz_4k0GlrlY47OFye1mV

# load library
"""
#torch
import torch
from torch import nn
import torch.nn.functional as F
import torchvision.transforms as transforms

#numpy
import numpy as np

#model
from attribute.layers import *

from attribute.resnest import *
from attribute.resnet import ResNet

#utility
from attribute.helpers import build_model_with_cfg
from PIL import Image

from util import *

"""# hyperparameter"""

image_size = 224

num_classes_texture = 27
resume = './attribute/checkpoint/kfashion_texture/model_texture_best.pth.tar'

model_texture = resnest50d(pretrained=False, nc=num_classes_texture)
    
change_class_texture= {
  0: "패딩",
  1: "무스탕",
  2: "퍼프",
  3: "네오프렌",
  4: "코듀로이",
  5: "트위드",
  6: "자카드",
  7: "니트",
  8: "페플럼",
  9: "레이스",
  10: "스판덱스",
  11: "메시",
  12: "비닐/PVC",
  13: "데님",
  14: "울/캐시미어",
  15: "저지",
  16: "시퀸/글리터",
  17: "퍼",
  18: "헤어 니트",
  19: "실크",
  20: "린넨",
  21: "플리스",
  22: "시폰",
  23: "스웨이드",
  24: "가죽",
  25: "우븐",
  26: "벨벳"
}

"""#best model"""

checkpoint = torch.load(resume, map_location=torch.device('cpu'))

model_texture.load_state_dict(checkpoint['state_dict'])

model_texture.eval()

"""# define augmentation"""

normalize = transforms.Normalize(mean = model_texture.image_normalization_mean, std = model_texture.image_normalization_std)

val_transform = transforms.Compose([
    Warp(image_size),
    transforms.ToTensor(),
    normalize,
])

