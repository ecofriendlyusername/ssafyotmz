# -*- coding: utf-8 -*-
"""Attribute_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1prdIi9syRBmaEz_4k0GlrlY47OFye1mV

# load library
"""
#torch
import torch
from torch import nn
import torch.nn.functional as F
import torchvision.transforms as transforms

#numpy
import numpy as np

#model
from attribute.layers import *

from attribute.resnest import *
from attribute.resnet import ResNet

#utility
from attribute.helpers import build_model_with_cfg
from PIL import Image

from util import *

"""# hyperparameter"""

image_size = 224

num_classes_print = 21
resume = './attribute/checkpoint/kfashion_print/model_print_best.pth.tar'

model_print = resnest50d(pretrained=False, nc=num_classes_print)
    
change_class_print = {
  0: "페이즐리",
  1: "하트",
  2: "지그재그",
  3: "깅엄",
  4: "하운즈 투스",
  5: "도트",
  6: "레터링",
  7: "믹스",
  8: "뱀피",
  9: "해골",
  10: "체크",
  11: "무지",
  12: "카무플라쥬",
  13: "그라데이션",
  14: "스트라이프",
  15: "호피",
  16: "아가일",
  17: "그래픽",
  18: "지브라",
  19: "타이다이",
  20: "플로럴"
}

"""#best model"""

checkpoint = torch.load(resume, map_location=torch.device('cpu'))

model_print.load_state_dict(checkpoint['state_dict'])

model_print.eval()

"""# define augmentation"""

normalize = transforms.Normalize(mean = model_print.image_normalization_mean, std = model_print.image_normalization_std)

val_transform = transforms.Compose([
    Warp(image_size),
    transforms.ToTensor(),
    normalize,
])

